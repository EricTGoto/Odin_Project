This is a diary of my progress through the Odin Project.
This will contain notes and random thoughts I've had as I work through the curriculum.

Dec 28th.
Began Odin Project.

HTML boilerplate: 
<!DOCTYPE html> - specifies version of HTML

<html>
    <head> -place where we put important metadata
        <title> </title> -gives browser tab a name
        <meta charset="utf-8"> -encoding of page
    </head>

    <body> -where the text of the webpage is added
    </body>
</html>

CSS lets you style HTML, add rules to selectors and HTML elements that are selected will follow those CSS rules.
example: 
the following makes all div text purple
div {
    color: puple;
}

. is the universal selector i.e. . { }
.___ is the class selector i.e. .text
#___ is the ID selector i.e. #pancake_section

More specific CSS rules take precedence.
ID > Class > Type
If tie, whichever rule was specified last is the winner.

Dec 29.
Learned about External, Inline and Internal CSS.
use <link rel="stylesheet" href="filename.css"> for external css, most common method

Worked on exercises 1-6 of the CSS foundations class. Made my own css and html files where I applied css to classes, ids with external, inline and internal CSS.

Started learning about the box model and the dev tools available in browser.

Dec 30.

Box model notes:
Everything on a webpage is a rectangular box.
Essentially, want to manipulate how the boxes are nested and stacked

Padding: space between edge of box and contents
Margin: space between box and another box
Border: space between margin and padding

two types of display types: inner display, outer display types
- inner display type dictates how elements inside a box are laid outer
- outer display type is whether or not a box is block or inline

two types of outer display types: block boxes and inline boxes:

block boxes:
- box will break onto a new line
- box will extend in the inline direction to fill the space available in its container
- width and height properties are respected
- padding, margin and border will cause other elements to be pushed away from the box

inline boxes:
- box will not break onto a new line
- width and height properties will not apply
- vertical padding, margins and borders will apply but not cause other inline boxes to move away from the box
- horizontal padding, margins and borders will apply and will cause other inline boxes to move away from the box

use the css property display, i.e display: flex; display: block; display: inline;

parts of a box:
- content box: modified with properties like width and height
- padding box: sits around content. use padding and related properties
- border box: wraps content and padding. use border and other properties
- margin box: wraps content, padding and border. use margin and other properties

standard css model:
margin not accounted for in total size of box. just content, border and padding

alternative css model:
size of box is just height and width properties
enable by using 
box-sizing: border-box;
if you want all elements to inherit the box-sizing: border-box; then put it in the html selector
html {
    box-sizing: border-box;
}

lot of info can be found here: https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model

Dec 31.

Continued reading about box model. 
Worked on margin and padding exercise 1

Jan 2 2022.

Working on margin and padding exercise 2.

Jan 3

Finished first attempt at margin and padding 2.
Will need to go back and look at the css articles from the previous lessons to refresh things like margin: 0 auto or how to put
horizontal and vertical attributes in the same line.

Jan 4

Working on margin and padding 2 again. This time I will write down my thoughts before I attempt so what I'm doing is more clear and not just guess and check.

What I see from the desired outcome image:
- the blue cards have margins with each other
- the blue cards have padding with the white container
- horizontal and vertical padding for the middle card is different
- the last card has its content centred
- button is on a new line, button is by default an inline element so manually change it to a block
    - use margin: 0 auto; to centre the button

Learned:
- can use margin: 0 auto; to easily centre items
- when using 2 values with margin/padding/border: [top/bottom] [left/right]

Began Flexbox section.

axes: main and cross
if flex-direction is row or row-reverse: main axis is in the inline direction, cross is block
if flex-direction is column or column-reverse: main axis is in the block direction, cross is inline

flex container: any element with display: flex
flex item: any element that is in a flex container

any element can be both a flex container and a flex item, i.e. a flex item can also have display: flex

flex declaration is shorthand for 3 properties:
default is flex: 0 1 auto, but if only one value specified (flex: 1;) then flex is interpreted as flex: 1 1 0;
- flex-grow: flex item's growth factor
             causes item to stretch and take up any available space on that axis, or proportion
- flex-shrink: flex item's shrink factor
               if not enough space and flex-shrink is positive integer, item can become smaller than the flex-basis
- flex-basis: sets initial size of flex item, auto asks to check the specified height
              flex basis refers to height in a column flex container and vice versa

flex has two directions (4 with the reverse directions): column and row. row is default
direction is set with flex-direction: [row/column];

justify-content: aligns items across the main axis
align-items: align items along the cross axis
gap: adds space between flex items
flex-wrap: create multiline flex
flex-flow: shorthand for flex-direction and flex-wrap together: flex-flow: [direction] [wrap]

some standard predefined flex values:
flex: initial; resets item to have initial flexbox values (flex: 0 1 auto)
flex: auto; same as flex: 1 1 auto;
flex: none; created inflexible flex items. i.e. flex: 0 0 auto;

Jan 5

Continue to read the assignment articles in the alignment section. Try to finish all of the exercises and move to the next section.

align-self: controls alignment of an individual flex item on the cross axis
align-content: controls space between flex lines on the cross axis
gap, column-gap, row-gap: for creating gaps

values for align-items/align-self: flex-start, flex-end, center, stretch, baseline
values for align-content: flex-start, flex-end, center, space-between, space-around, stretch, space-evenly
values for justify-content: flex-start, flex-end, center, space-between, space-around, space-evenly

exercise discussion:

flex-center: simple solution, enable flex and then use align-items and justify-content center

flex-header:
- logo is centred (justify-content, align-items)
- items in header have padding 
- links are pushed to left and right (justify-content: left right?)
- ul default margin/padding
- using flex makes the list items change to horizontal

Jan 6

difference between space-between and space-around:
- space between has items evenly distributed with first item at start of container and last one at the end
- space evenly has items that are evenly distributed with equal space around The_box_model

flex-header-2:
- padding for entire header
- list links should be flexed
- every item is vertically cenetered (align-items: center in header)
- my solution involved creating a flex container for the items that are stuck to the right end and using justify-content: flex-end
- TOP solution was to create two classes left and right for the items and using justify-content: space-between

flex-information:
- information is cenetered while plants are spaced evenly so make two flex containers
- containers (for the image and text) have a specific width and text wraps (flex-wrap)
- pictures are cenetered within text (justify-content in the container)
- text is displayed with just wrapping
- centering text easily done with text-align

flex-modal:
- exclamation mark seems to be in its own container, everything else in another container
- title inline with exit button?
- create a flex for the header so the exit button and the header are together

Jan 9

flex-layout:
- basically looks like google
- logo, text box and buttons cenetered
- footer bottom with text at ends (flex-start/end?)
- same with the header, text at ends
- body and content with flex-direction of column
- top solution puts flex in the ul -> makes sense

flex-layout2:
- looks like three sections: header, main, and footer
- main is also its own flex container with a sidebar and the content
- the cards should have their own container

goal: try to finish flexfroggy levels by Jan 12

started working on the landing page assignment

landing page assignment: 
- landing page seems to have 4 sections?
    - header, info section, quote section and sign up section
- header is cenetered has a list with three links
    - header break down into two flex items?
- information section has text cenetered and 4 items also cenetered

Jan 10:

continue working on landing page assignment

Jan 11:

do levels 11-24 of flex froggy
- level 14 introduced the order property
finished flex froggy

work a bit on the landing page:
- need to centre the content and have the background expand -> create separate containers for content and center? background on its own

Jan 12:

goal: finish the landing page and begin the js foundations section

- the blue background in the header doesn't stretch all the way

Jan 13:

- reason why the backgroudn didn't stretch all the way is that there is a default padding/margin
- had a problem where there was a horizontal scroll bar, problem was from having set a width for the quote and main sections
    - didn't need to set a width because body and html have a width set so the flex containers will stretch to fill the width

-finished first version of landing page
some issues I may want to address:
- sizing of the ad section at different screen widths
- widths of all sections at different screen widths
- add some flair or originality
- fix the font?

Jan 18:

- started the JS foundations
- console.log() to print something to the dev console in the browser
- can include js into a webapage by linking <script src="javascript.js"></script>
- declare a variable with let
- declare a constant with const
- can use both ' and " for strings
- use \ to escape a character in a string
- use ` to create template literal (like an f string in python), variables/expressions wrapped in ${}

Jan 19:

psuedo code: writing out logic for program in natural language instead of code
decompose problems into subproblems



