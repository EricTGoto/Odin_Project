This is a diary of my progress through the Odin Project.
This will contain notes and random thoughts I've had as I work through the curriculum.

Dec 28th.
Began Odin Project.

HTML boilerplate: 
<!DOCTYPE html> - specifies version of HTML

<html>
    <head> -place where we put important metadata
        <title> </title> -gives browser tab a name
        <meta charset="utf-8"> -encoding of page
    </head>

    <body> -where the text of the webpage is added
    </body>
</html>

CSS lets you style HTML, add rules to selectors and HTML elements that are selected will follow those CSS rules.
example: 
the following makes all div text purple
div {
    color: puple;
}

. is the universal selector i.e. . { }
.___ is the class selector i.e. .text
#___ is the ID selector i.e. #pancake_section

More specific CSS rules take precedence.
ID > Class > Type
If tie, whichever rule was specified last is the winner.

Dec 29.
Learned about External, Inline and Internal CSS.
use <link rel="stylesheet" href="filename.css"> for external css, most common method

Worked on exercises 1-6 of the CSS foundations class. Made my own css and html files where I applied css to classes, ids with external, inline and internal CSS.

Started learning about the box model and the dev tools available in browser.

Dec 30.

Box model notes:
Everything on a webpage is a rectangular box.
Essentially, want to manipulate how the boxes are nested and stacked

Padding: space between edge of box and contents
Margin: space between box and another box
Border: space between margin and padding

two types of display types: inner display, outer display types
- inner display type dictates how elements inside a box are laid outer
- outer display type is whether or not a box is block or inline

two types of outer display types: block boxes and inline boxes:

block boxes:
- box will break onto a new line
- box will extend in the inline direction to fill the space available in its container
- width and height properties are respected
- padding, margin and border will cause other elements to be pushed away from the box

inline boxes:
- box will not break onto a new line
- width and height properties will not apply
- vertical padding, margins and borders will apply but not cause other inline boxes to move away from the box
- horizontal padding, margins and borders will apply and will cause other inline boxes to move away from the box

use the css property display, i.e display: flex; display: block; display: inline;

parts of a box:
- content box: modified with properties like width and height
- padding box: sits around content. use padding and related properties
- border box: wraps content and padding. use border and other properties
- margin box: wraps content, padding and border. use margin and other properties

standard css model:
margin not accounted for in total size of box. just content, border and padding

alternative css model:
size of box is just height and width properties
enable by using 
box-sizing: border-box;
if you want all elements to inherit the box-sizing: border-box; then put it in the html selector
html {
    box-sizing: border-box;
}

lot of info can be found here: https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model

Dec 31.

Continued reading about box model. 
Worked on margin and padding exercise 1

Jan 2 2022.

Working on margin and padding exercise 2.

Jan 3

Finished first attempt at margin and padding 2.
Will need to go back and look at the css articles from the previous lessons to refresh things like margin: 0 auto or how to put
horizontal and vertical attributes in the same line.

Jan 4

Working on margin and padding 2 again. This time I will write down my thoughts before I attempt so what I'm doing is more clear and not just guess and check.

What I see from the desired outcome image:
- the blue cards have margins with each other
- the blue cards have padding with the white container
- horizontal and vertical padding for the middle card is different
- the last card has its content centred
- button is on a new line, button is by default an inline element so manually change it to a block
    - use margin: 0 auto; to centre the button

Learned:
- can use margin: 0 auto; to easily centre items
- when using 2 values with margin/padding/border: [top/bottom] [left/right]

Began Flexbox section.

axes: main and cross
if flex-direction is row or row-reverse: main axis is in the inline direction, cross is block
if flex-direction is column or column-reverse: main axis is in the block direction, cross is inline

flex container: any element with display: flex
flex item: any element that is in a flex container

any element can be both a flex container and a flex item, i.e. a flex item can also have display: flex

flex declaration is shorthand for 3 properties:
default is flex: 0 1 auto, but if only one value specified (flex: 1;) then flex is interpreted as flex: 1 1 0;
- flex-grow: flex item's growth factor
             causes item to stretch and take up any available space on that axis, or proportion
- flex-shrink: flex item's shrink factor
               if not enough space and flex-shrink is positive integer, item can become smaller than the flex-basis
- flex-basis: sets initial size of flex item, auto asks to check the specified height
              flex basis refers to height in a column flex container and vice versa

flex has two directions (4 with the reverse directions): column and row. row is default
direction is set with flex-direction: [row/column];

justify-content: aligns items across the main axis
align-items: align items along the cross axis
gap: adds space between flex items
flex-wrap: create multiline flex
flex-flow: shorthand for flex-direction and flex-wrap together: flex-flow: [direction] [wrap]

some standard predefined flex values:
flex: initial; resets item to have initial flexbox values (flex: 0 1 auto)
flex: auto; same as flex: 1 1 auto;
flex: none; created inflexible flex items. i.e. flex: 0 0 auto;

Jan 5

Continue to read the assignment articles in the alignment section. Try to finish all of the exercises and move to the next section.

align-self: controls alignment of an individual flex item on the cross axis
align-content: controls space between flex lines on the cross axis
gap, column-gap, row-gap: for creating gaps

values for align-items/align-self: flex-start, flex-end, center, stretch, baseline
values for align-content: flex-start, flex-end, center, space-between, space-around, stretch, space-evenly
values for justify-content: flex-start, flex-end, center, space-between, space-around, space-evenly

exercise discussion:

flex-center: simple solution, enable flex and then use align-items and justify-content center

flex-header:
- logo is centred (justify-content, align-items)
- items in header have padding 
- links are pushed to left and right (justify-content: left right?)
- ul default margin/padding
- using flex makes the list items change to horizontal

Jan 6

difference between space-between and space-around:
- space between has items evenly distributed with first item at start of container and last one at the end
- space evenly has items that are evenly distributed with equal space around The_box_model

flex-header-2:
- padding for entire header
- list links should be flexed
- every item is vertically cenetered (align-items: center in header)
- my solution involved creating a flex container for the items that are stuck to the right end and using justify-content: flex-end
- TOP solution was to create two classes left and right for the items and using justify-content: space-between

flex-information:
- information is cenetered while plants are spaced evenly so make two flex containers
- containers (for the image and text) have a specific width and text wraps (flex-wrap)
- pictures are cenetered within text (justify-content in the container)
- text is displayed with just wrapping
- centering text easily done with text-align

flex-modal:
- exclamation mark seems to be in its own container, everything else in another container
- title inline with exit button?
- create a flex for the header so the exit button and the header are together

Jan 9

flex-layout:
- basically looks like google
- logo, text box and buttons cenetered
- footer bottom with text at ends (flex-start/end?)
- same with the header, text at ends
- body and content with flex-direction of column
- top solution puts flex in the ul -> makes sense

flex-layout2:
- looks like three sections: header, main, and footer
- main is also its own flex container with a sidebar and the content
- the cards should have their own container

goal: try to finish flexfroggy levels by Jan 12

started working on the landing page assignment

landing page assignment: 
- landing page seems to have 4 sections?
    - header, info section, quote section and sign up section
- header is cenetered has a list with three links
    - header break down into two flex items?
- information section has text cenetered and 4 items also cenetered

Jan 10:

continue working on landing page assignment

Jan 11:

do levels 11-24 of flex froggy
- level 14 introduced the order property
finished flex froggy

work a bit on the landing page:
- need to centre the content and have the background expand -> create separate containers for content and center? background on its own

Jan 12:

goal: finish the landing page and begin the js foundations section

- the blue background in the header doesn't stretch all the way

Jan 13:

- reason why the backgroudn didn't stretch all the way is that there is a default padding/margin
- had a problem where there was a horizontal scroll bar, problem was from having set a width for the quote and main sections
    - didn't need to set a width because body and html have a width set so the flex containers will stretch to fill the width

-finished first version of landing page
some issues I may want to address:
- sizing of the ad section at different screen widths
- widths of all sections at different screen widths
- add some flair or originality
- fix the font?

Jan 18:

- started the JS foundations
- console.log() to print something to the dev console in the browser
- can include js into a webapage by linking <script src="javascript.js"></script>
- declare a variable with let
- declare a constant with const
- can use both ' and " for strings
- use \ to escape a character in a string
- use ` to create template literal (like an f string in python), variables/expressions wrapped in ${}

Jan 19:

psuedo code: writing out logic for program in natural language instead of code
decompose problems into subproblems
finished the console based rock paper scissors game

Jan 21:
- work on the JS exercises in Foundations part 4
    - worked on first 3 exercises

Jan 22:
- continue working on the JS exercises, most of them are pretty trivial
- start reading about DOM and DOM maniuplation

DOM: Document Object model
    - tree like representaiton of the contents of a webpage
    - tree of nodes with different relationships depending on how they are arranged in the HTML Document

    - target nodes with selectors:
        - element.querySelector(selector) returns reference to the first match of selector
        - element.querySelectorAll(selectors) returns a "nodelist" containing references to all of the matches of the selectors

    - element creatoin
        - document.createElement(tagName, [options])
        - creates an element in memory but does not place it

    - append elements
        - parentNode.appendChild(childNode) appends childNode as the last child of parentNode
        - parentNode.insertBefore(newNode, referenceNode) inserts newNode into parentNode before referenceNode
    
    - remove elements
        - parentNode.removeChild(child) removes child from parentNode on the DOM and returns reference to child

    - alter elements
        - get a reference to an element and then you can make modifications to it like changing colour and so on
            e.g: const div = document.createElement('div')
                 div.style.color = 'blue';
                 div.style.cssText = 'color: blue; background: white';
    
    - editing attributes
        - div.setAttribute('id','theDiv');
            - if id exists, update it to 'theDiv' else create an id with value "theDiv"
        
        - div.getAttribute('id'): returns value of specified attribute

        - div.removeAttribute('id'); removes specified attribute

    - working with classes
        - div.classList.add('new'): adds class "new" to your div
        - div.classList.remove('new'): remove "new" class from div
        - div.classList.toggle('active'):  toggles the style "active", if it doesn't exist, it creates it
    
    - adding text content
        - div.textContent = 'Hello World!'

Jan 23: 
Learning about DOM Continued
Learn about callback functions since eventListeners rely on them
try to work on the wes bos 30 day challenge ~ 1+ every 2 days

    Events:
        - make your page dynamic
            e.g. respond to mouse clicks or keypresses
        - three ways to add Events
            1. add to html
                <button onClick="alert('Hello World')>Click Me</button>
                not a good way because HTML gets cluttered and can only have 1 onClick event per element
            2. put the JS in a JS filename

                html document side:
                <button id="btn">Click me</button>

                js file side:
                const btn = document.querySelector('#btn');
                btn.onClick = () => alert('Hello World");

                this is better but the problem of a DOM element only being able to have 1 onClick property is not solved

            3. use add event listener

                html document side:
                <button id="btn">Click me</button>

                js file side:
                const btn = document.querySelector('#btn');
                btn.addEventListener('click', () => {
                    alert("Hello World");
                });
    
        - use functions to organize code
            e.g. if you have multiple buttons that alert user after click then make a function for the alert

            function alertFunction() {
                alert("Button Clicked");
            }

            btn.addEventListener('click', alertFunction)
        



callbacks:
    - functions that are passed into another function as an argument

    Normal Functions (Named Functions)
    - the basic way to create a function

    function helloFunction(name) {
        console.log(`Hello ${name}`)
    }

    the above is a function declaration and broken into a few parts:
        - function keyword
        - name of function
        - parameters: everything between ( ) is a parameters
        - function body: part where function does something

    call a normal function by typing the name of the function with ()

    helloFunction("Bob")

    Anonymous Functions
    - are not named, but can be assigned to a variable
    - mostly used by passing them into other functions as a callbacks


    const helloFunction = function(name) {
        console.log(`Hello ${name});
    }

    const helloFunction = (name) => {
        console.log(`Hello $)
    }

    both can be called the same way:
    helloFunction("bob")

    Arrow Functions:
    - shorter way to write a function
    - if only one argument () can be omitted
    - if arrow function is one line {} can be omitted
    - when omitting {}, arrow function returns evaluated expression without requiring returns

    examples with arguments:

    const playThe = (funky) => {
        return funky + " music";
    }

    const playThe = funky => {
        return funky + " music";
    }

    const playThe = funky => funky + " music";

    examples without arguments:

    const playThat = () => "funky music";
    const playThat = () => {return "funky music"; }
    const playThat = () => {
        return "funky music";
    }

    Example to understand callbacks:
        function myForEach(array, callback) {
            for (let i = 0; i < array.length; i++) {
                callback(array[i]); // This is when the callback function gets called, or executed
            }
        }

        // You would call it like this:
        const myArry = [2, 3, 4, 2];
        myForEach(myArry, (item) => {
            console.log(item + 2); 
        })

        since an arrow function can be passed as a callback, it is passed into myForEach,
        and then performs its function to console.log every item in the array plus 2

        its also possible to do this:

        function printItemPLusTwo(item) {
            console.log(item + 2);
        }

        myForEach(myArry, printItemPlusTwo);
            - printItemPlusTwo acts as the callback, when a function is passed into another function as a parameter, only the name is needed

    Event Listeners:

    const element = document.querySelector("#myId");
    element.addEventListener('click', (event) => {
        console.log(event.target.value);
    })

    where does event come from? as we learned from above, event is added into the callback by the addEventListener function
    this is like myForEach adding the array elements into the callback, addEventListener has some part that passes the event object into the callback

    Now that we know this,

    function alertFunction() {
        alert("Button Clicked");
    }

    btn.addEventListener('click', alertFunction)

    makes a lot more sense. alertFunction is the callback

Events continued:

- e is an object that references the event itself
    can do something like e.target to get info about the event's target
    or can do e.target.style.background to change the event's target's background

    Attaching Listeners to groups of nodes:
        - use querySelectorAll('selector')

        
Jan 24th:

Comments:
- start working on adding a UI to rock paper scissors
    - got the basics of it working, tomorrow improve the UI

Notes: 

event capture, propagation, bubbling and once:
 - when an element is acted on, like clicked, the effect will "bubble" or ripple downwards and hit every element that is in the click area 
 - for example if you have 3 concentric squares of different sizes with the bigger squares behind the smaller squres and you click on the smallest one,
 the click will affect the squares from the smallest to the biggest -> this is bubbling
 - if you use capture :true, it will go in reverse order. the biggest will be affected and then the medium sized square and then the smallest
 - stopPropagation will make the bubbling stop -> good way to control what elements will get a certain action
 - capture is added to the addEventListener
 - once, also added to an addEventListener, makes the event listener only listen once (once: true)

data attributes:

- HTML elements can have attributes on them are are used for anything from accessibility to stylistic control -> basics
- discouraged to make up your own attributes like <div highlight="true"></div>
    - reason is HTML becomes invalid, and may conclflict with html updates in the future
- BUT, you can make your own attributes by prefixing them with data-

    e.g. <div data-foo></div>
         <div data-size="large"></div>

you can select elements with data attributes the following way (among many):

<audio data-key="65" src="sound.mp3"></audio>

audio[data-key="65"]

if you want the reference to this element then

const audio = document.querySelector(`audio[data-key="65"]`)

git notes:
- can make new branches using the command: git branch <branch_name>
- change to the branch by using: git checkout <branch_name>
- can create and change in one go by: git checkout -b <branch_name>
- use git branch with no arguments to show all branches, the one with an asterisk beside it is the one you are currently on
- a recommended workflow is to work on features on "test" branches, called feature branches, and once the feature is finished and tested, merge it to the main branch
- merge with git merge <branch_name>, will take commits from <branch_name> and add to the branch that you are on
- branches can be deleted by: git branch -d <branch_name> (if merged into main or with -D if not)
- to push from a specific branch just do: git push origin <branch_name>

Jan 25:
- make my rps ui look better, add colours and show what the computer selected, try to use as much JS as possible
- want to implement:
    - reset after pressing play again: done
    - refactor code so there aren't any globals?
    - make js easier to read
    - separate into multiple js files? one for DOM and other for logic?
    - comment code
- learned that modifying textContent removes all childNodes

